# -*- coding: utf-8 -*-
"""midsemproject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b5pvMc8-IohnJu1ZihorVovryQuvpSNC

Importation of Libraries
"""

import pandas as pd
import sklearn
import numpy as np
import pandas as pd
import numpy as np, pandas as pd
import matplotlib.pyplot as plt
from sklearn import tree, metrics
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from google.colab import drive
drive.mount('/content/drive')

"""Loading of Data"""

fifa21 = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Midsemester Project/players_21.csv')

"""Exploratory Data Analysis"""

data1 = fifa21.copy() #Creating copy of data to maintain original copy of data

data1.info()

data1.head(5) #Inspecting data attributes by viewing values

data1.describe()

data1.dtypes

with pd.option_context('display.max_rows', None, 'display.max_columns', None):
  print(data1.dtypes)

corr_matrix = data1.corr()

corr_matrix["overall"].sort_values(ascending = False)

"""Data Preprocessing"""

num_data1 = data1.select_dtypes(include = "number")
nonnum_data1 = data1.select_dtypes(exclude = "number")

num_data1.info()

#Droping all values with less than 30% of values
num_data1.drop(columns = ["nation_team_id", "nation_jersey_number", "goalkeeping_speed", "skill_fk_accuracy" , "power_stamina","skill_moves","skill_dribbling",
                            "attacking_volleys","defending","power_strength","mentality_positioning","mentality_penalties","attacking_heading_accuracy","attacking_finishing",
                          "defending_marking_awareness","mentality_interceptions","power_jumping","movement_agility","defending_standing_tackle","defending_sliding_tackle",
                          "weak_foot","movement_sprint_speed","movement_acceleration","pace","weight_kg","movement_balance","club_contract_valid_until","height_cm","goalkeeping_positioning",
                          "goalkeeping_reflexes","goalkeeping_handling","goalkeeping_diving","goalkeeping_kicking","nation_jersey_number","nationality_id","club_jersey_number","club_team_id",
                          "league_level","nation_team_id"], inplace = True)

nonnum_data1.info()

#Droping all columns with less than 30% of values
nonnum_data1.drop(columns = ["club_loaned_from", "nation_position", "player_tags", "player_traits", "nation_logo_url"], inplace = True)

#Droping all useless features
nonnum_data1.drop(columns = ["short_name", "long_name", "real_face", "player_face_url",  "club_logo_url", "club_flag_url", "nation_flag_url","player_positions","dob", "club_name","league_name","club_position","club_joined","nationality_name","preferred_foot","preferred_foot","work_rate","body_type","player_url"], inplace = True)

"""Imputation"""

from sklearn.impute import SimpleImputer

imp1 = SimpleImputer()

imp1.fit(num_data1)

num = imp1.fit_transform(num_data1)

num = pd.DataFrame(num, columns=num_data1.columns)

num.info()

numcorr = num.corr()

numcorr["overall"].sort_values(ascending = False)

for col in nonnum_data1.columns:
    nonnum_data1[col].fillna(nonnum_data1[col].mode()[0], inplace=True)

nonnum = nonnum_data1

nonnum.head(5)

nonnum.info()

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

for column in nonnum.columns:
        nonnum[column] = label_encoder.fit_transform(nonnum[column])

nonnum.head(5)

y = num["overall"]

num.drop("overall", axis =1, inplace = True)

"""Scaling the data"""

sc = StandardScaler()

data21 = pd.concat([num, nonnum], axis=1)
data21

scaled = sc.fit_transform(data21)

data21=pd.DataFrame(scaled, columns=data21.columns)

X=data21

Xtrain,Xtest,Ytrain,Ytest=train_test_split(X,y,test_size=0.2,random_state=42)

from sklearn.model_selection import cross_val_score, KFold
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor,VotingRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import make_scorer, mean_squared_error,r2_score

# Initialize the Gradient Boosting Regressor
gb_regressor = GradientBoostingRegressor(n_estimators=1000, learning_rate=0.1, random_state=42, max_depth=4, min_samples_split=2)

# Train the model
gb_regressor.fit(Xtrain, Ytrain)

y_pred = gb_regressor.predict(Xtest)
# Calculate Mean Squared Error (MSE)
gbmse = mean_squared_error(Ytest, y_pred)

# Calculate R-squared (R2) score
gbr2 = r2_score(Ytest, y_pred)

print(f'Mean Squared Error: {gbmse}')
print(f'R-squared (R2) Score: {gbr2}')

"""Random Forest Regressor"""

# Initialize the Random Forest Regressor
rf_regressor = RandomForestRegressor(n_estimators=1000, random_state=42)

# Train the model
rf_regressor.fit(Xtrain, Ytrain)
y_pred = rf_regressor.predict(Xtest)
# Calculate Mean Squared Error (MSE)
rfmse = mean_squared_error(Ytest, y_pred)

# Calculate R-squared (R2) score
rfr2 = r2_score(Ytest, y_pred)

print(f'Mean Squared Error: {rfmse}')
print(f'R-squared (R2) Score: {rfr2}')

"""Linear Regression"""

linear_regressor = LinearRegression()
linear_regressor.fit(Xtrain, Ytrain)
y_pred = linear_regressor.predict(Xtest)

LRmse = mean_squared_error(Ytest, y_pred)

LRr2 = r2_score(Ytest, y_pred)

print(f'Mean Squared Error: {LRmse}')
print(f'R-squared (R2) Score: {LRr2}')

ensemble = VotingRegressor(estimators=[
    ('linear_regressor', linear_regressor),
    ('rf_regressor ', rf_regressor ),
    ('gb_regressor', gb_regressor),
])

ensemble.fit(Xtrain, Ytrain)
score = ensemble.score(Xtest, Ytest)



y_pred = ensemble.predict(Xtest)


mse = mean_squared_error(Ytest, y_pred)
LRr2 = r2_score(Ytest, y_pred)

print("MSE: ", mse)
print("test score: " , LRr2)

"""Testing with Players_22"""

fifa22 = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Midsemester Project/players_22.csv')

data22 = fifa22.copy()

data22

data22.describe()

data22.dtypes

with pd.option_context('display.max_rows', None, 'display.max_columns', None):
  print(data22.dtypes)

num_data22 = data22.select_dtypes(include = "number")
nonnum_data22 = data22.select_dtypes(exclude = "number")

num_data22.drop(columns = ["nation_team_id", "nation_jersey_number", "goalkeeping_speed", "skill_fk_accuracy" , "power_stamina","skill_moves","skill_dribbling",
                            "attacking_volleys","defending","power_strength","mentality_positioning","mentality_penalties","attacking_heading_accuracy","attacking_finishing",
                          "defending_marking_awareness","mentality_interceptions","power_jumping","movement_agility","defending_standing_tackle","defending_sliding_tackle",
                          "weak_foot","movement_sprint_speed","movement_acceleration","pace","weight_kg","movement_balance","club_contract_valid_until","height_cm","goalkeeping_positioning",
                          "goalkeeping_reflexes","goalkeeping_handling","goalkeeping_diving","goalkeeping_kicking","nation_jersey_number","nationality_id","club_jersey_number","club_team_id",
                          "league_level","nation_team_id"], inplace = True)

#Droping all columns with less than 30% of values
nonnum_data22.drop(columns = ["club_loaned_from", "nation_position", "player_tags", "player_traits", "nation_logo_url"], inplace = True)

#Droping all useless features
nonnum_data22.drop(columns = ["short_name", "long_name", "real_face", "player_face_url",  "club_logo_url", "club_flag_url", "nation_flag_url","player_positions","dob", "club_name","league_name","club_position","club_joined","nationality_name","preferred_foot","preferred_foot","work_rate","body_type","player_url"], inplace = True)



imp1.fit(num_data22)

num22 = imp1.fit_transform(num_data22)

num22 = pd.DataFrame(num22, columns=num_data22.columns)

for col in nonnum_data22.columns:
    nonnum_data22[col].fillna(nonnum_data22[col].mode()[0], inplace=True)

nonnum22 = nonnum_data22

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

for column in nonnum22.columns:
        nonnum22[column] = label_encoder.fit_transform(nonnum22[column])

y22 = num22["overall"]

num22.drop("overall", axis =1, inplace = True)

data22 = pd.concat([num22, nonnum22], axis=1)
data22

scaled22 = sc.fit_transform(data22)

data22=pd.DataFrame(scaled22, columns=data22.columns)
data22

X22 = data22

X22

score = ensemble.score(X22, y22)


# Make predictions using the ensemble model
y_pred_22 = ensemble.predict(X22)

# Calculate RMSE (Root Mean Squared Error)
mse = mean_squared_error(y22, y_pred_22)

print("RMSE: %.4f" % np.sqrt(mse))
print("size of prediction: ", len(ensemble.predict(X22)))
print("prediction: \n", ensemble.predict(X22))
print("test score: {0:.4f}\n".format(score))

score = rf_regressor.score(X22, y22)


# Make predictions using the ensemble model
y_pred_22 = rf_regressor.predict(X22)

# Calculate RMSE (Root Mean Squared Error)
mse = mean_squared_error(y22, y_pred_22)

print("RMSE: %.4f" % np.sqrt(mse))
print("size of prediction: ", len(rf_regressor.predict(X22)))
print("prediction: \n", rf_regressor.predict(X22))
print("test score: {0:.4f}\n".format(score))

score = gb_regressor.score(X22, y22)


# Make predictions using the ensemble model
y_pred_22 = gb_regressor.predict(X22)

# Calculate RMSE (Root Mean Squared Error)
mse = mean_squared_error(y22, y_pred_22)

print("RMSE: %.4f" % np.sqrt(mse))
print("size of prediction: ", len(gb_regressor.predict(X22)))
print("prediction: \n", gb_regressor.predict(X22))
print("test score: {0:.4f}\n".format(score))

import pickle
with open('rf_regressor.pkl', 'wb') as model_file:
    pickle.dump(rf_regressor, model_file)

with open('scaler.pkl', 'wb') as scaler_file:
    pickle.dump(sc, scaler_file)